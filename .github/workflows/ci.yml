name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          components: clippy
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --locked --all-features --all-targets

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: ./.github/actions/setup-rust
      - name: Build and run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all-features --all-targets
      - name: Build and run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all-features --doc

  codecov:
    # See <https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html>
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        id: setup_rust
        with:
          components: llvm-tools-preview
      - name: Install rustfilt and cargo-binutils
        if: steps.setup_rust.outputs.cache_hit != 'true'
        run: |
          cargo install rustfilt cargo-binutils
      - name: Test with coverage
        env:
          RUSTFLAGS: -Zinstrument-coverage
          LLVM_PROFILE_FILE: profile-%m.profraw
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all-features --all-targets --no-fail-fast
      - name: Doc test with coverage
        env:
          RUSTFLAGS: -Zinstrument-coverage
          LLVM_PROFILE_FILE: profile-%m.profraw
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all-features --doc --no-fail-fast
      - name: Creating coverage report
        env:
          RUSTFLAGS: -Zinstrument-coverage
        run: |
          # Show files
          ls -lah
          # Merge execution traces
          cargo profdata -- merge -sparse $(find . -iname "profile-*.profraw") -o profile.profdata
          # Export to lcov format for codecov
          # NOTE: The inner cargo test command needs to be the same as above
          cargo cov -- export \
            --format=lcov > profile.lcov \
            --instr-profile=profile.profdata \
            $( \
              for file in \
                $( \
                  cargo test --all-features --all-targets --no-run --message-format=json \
                    | jq -r "select(.profile.test == true) | .filenames[]" \
                    | grep -v dSYM - \
                ); \
              do \
                printf "%s %s " -object $file; \
              done \
            )
      - name: Submit to codecov.io
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional for public repos
          flags: test
          fail_ci_if_error: true
          verbose: true

  security_audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  container:
    name: Build image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64]
        # linux/arm64 is disabled for now pending native runners; building in
        # qemu-aarch64 is too slow and costly.
        # See <https://github.com/actions/virtual-environments/issues/2187>
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get commit date
        id: author-date
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commit_details = await github.rest.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          # Bump buildkit version because we need PR 2433 to fix a bug
          # in Github Actions Cache support.
          # See <https://github.com/moby/buildkit/pull/2433>
          driver-opts: image=moby/buildkit:v0.9.3
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: ${{ matrix.platform }}
          tags: ${{ github.repository }}:${{ github.sha }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            COMMIT_DATE=${{ steps.author-date.outputs.result }}
      - name: Test image
        run:
          docker run --platform ${{ matrix.platform }} --rm ${{ github.repository }}:${{ github.sha }} --version

  helm_lint:
    name: Lint helm chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup kube-score
        uses: tobbbles/setup-kubescore@v1.0.2
      - name: Run kube-score
        run: helm template deploy | kube-score score -

  helm_test:
    name: Test deployment
    runs-on: ubuntu-latest
    needs: [container]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
      - name: Test install deploy
        run: helm install deploy -g --atomic --timeout 15s --set image.tag="${{ github.sha }}"
